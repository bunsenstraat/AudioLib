/*
 * PhaseVocoder
 *
 * Copyright (c) 2017 - Terence M. Darwen - tmdarwen.com
 *
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include <gtest/gtest.h>
#include <iostream>
#include <Signal/Fourier.h>
#include <Signal/SignalConversion.h>

// This is one second of a 100 Hz signal at 1024 Hz sampling frequency
std::vector<double> testTimeDomain = {
  0.0000,  0.5758,  0.9416,  0.9638,  0.6344,  0.0736, -0.5141, -0.9142,
 -0.9808, -0.6895, -0.1467,  0.4496,  0.8819,  0.9925,  0.7410,  0.2191,
 -0.3827, -0.8448, -0.9988, -0.7883, -0.2903,  0.3137,  0.8032,  0.9997,
  0.8315,  0.3599, -0.2430, -0.7572, -0.9951, -0.8700, -0.4275,  0.1710,
  0.7071,  0.9853,  0.9040,  0.4929, -0.0980, -0.6531, -0.9700, -0.9330,
 -0.5556,  0.0246,  0.5957,  0.9495,  0.9569,  0.6152,  0.0491, -0.5350,
 -0.9239, -0.9756, -0.6715, -0.1224,  0.4714,  0.8932,  0.9892,  0.7242,
  0.1951, -0.4052, -0.8577, -0.9972, -0.7730, -0.2667,  0.3369,  0.8176,
  1.0000,  0.8176,  0.3369, -0.2667, -0.7730, -0.9973, -0.8577, -0.4052,
  0.1951,  0.7243,  0.9892,  0.8932,  0.4714, -0.1224, -0.6715, -0.9757,
 -0.9239, -0.5350,  0.0491,  0.6152,  0.9569,  0.9496,  0.5957,  0.0245,
 -0.5555, -0.9330, -0.9700, -0.6531, -0.0980,  0.4929,  0.9040,  0.9853,
  0.7071,  0.1710, -0.4276, -0.8701, -0.9952, -0.7572, -0.2430,  0.3599,
  0.8314,  0.9997,  0.8032,  0.3137, -0.2903, -0.7883, -0.9987, -0.8448,
 -0.3827,  0.2191,  0.7410,  0.9925,  0.8819,  0.4496, -0.1467, -0.6895,
 -0.9808, -0.9142, -0.5141,  0.0735,  0.6344,  0.9638,  0.9416,  0.5758,
  0.0000, -0.5758, -0.9415, -0.9637, -0.6343, -0.0735,  0.5141,  0.9142,
  0.9808,  0.6895,  0.1467, -0.4496, -0.8819, -0.9925, -0.7409, -0.2191,
  0.3826,  0.8448,  0.9988,  0.7884,  0.2903, -0.3137, -0.8032, -0.9997,
 -0.8315, -0.3599,  0.2430,  0.7572,  0.9952,  0.8701,  0.4276, -0.1710,
 -0.7071, -0.9853, -0.9040, -0.4929,  0.0980,  0.6532,  0.9700,  0.9330,
  0.5556, -0.0246, -0.5957, -0.9495, -0.9569, -0.6152, -0.0491,  0.5350,
  0.9239,  0.9757,  0.6716,  0.1224, -0.4714, -0.8932, -0.9891, -0.7242,
 -0.1951,  0.4052,  0.8577,  0.9973,  0.7730,  0.2667, -0.3369, -0.8175,
 -1.0000, -0.8176, -0.3369,  0.2667,  0.7730,  0.9973,  0.8577,  0.4052,
 -0.1951, -0.7242, -0.9891, -0.8932, -0.4714,  0.1224,  0.6716,  0.9757,
  0.9239,  0.5350, -0.0491, -0.6152, -0.9569, -0.9495, -0.5957, -0.0246,
  0.5556,  0.9330,  0.9700,  0.6532,  0.0980, -0.4929, -0.9040, -0.9853,
 -0.7071, -0.1709,  0.4275,  0.8701,  0.9952,  0.7572,  0.2430, -0.3599,
 -0.8314, -0.9997, -0.8032, -0.3137,  0.2903,  0.7883,  0.9988,  0.8448,
  0.3827, -0.2191, -0.7409, -0.9925, -0.8819, -0.4496,  0.1467,  0.6895,
  0.9808,  0.9142,  0.5141, -0.0736, -0.6344, -0.9637, -0.9415, -0.5758,
  0.0000,  0.5758,  0.9416,  0.9638,  0.6344,  0.0735, -0.5141, -0.9142,
 -0.9807, -0.6895, -0.1467,  0.4496,  0.8819,  0.9925,  0.7410,  0.2191,
 -0.3827, -0.8448, -0.9988, -0.7883, -0.2903,  0.3137,  0.8032,  0.9997,
  0.8315,  0.3599, -0.2430, -0.7572, -0.9952, -0.8701, -0.4276,  0.1710,
  0.7071,  0.9853,  0.9040,  0.4929, -0.0980, -0.6531, -0.9700, -0.9330,
 -0.5556,  0.0245,  0.5957,  0.9495,  0.9569,  0.6152,  0.0491, -0.5350,
 -0.9239, -0.9756, -0.6716, -0.1224,  0.4714,  0.8932,  0.9892,  0.7243,
  0.1951, -0.4052, -0.8577, -0.9973, -0.7730, -0.2667,  0.3369,  0.8176,
  1.0000,  0.8176,  0.3369, -0.2667, -0.7730, -0.9973, -0.8577, -0.4052,
  0.1951,  0.7243,  0.9892,  0.8932,  0.4714, -0.1224, -0.6716, -0.9757,
 -0.9239, -0.5350,  0.0491,  0.6152,  0.9569,  0.9495,  0.5957,  0.0245,
 -0.5555, -0.9330, -0.9700, -0.6532, -0.0980,  0.4929,  0.9040,  0.9853,
  0.7071,  0.1709, -0.4276, -0.8701, -0.9951, -0.7572, -0.2430,  0.3599,
  0.8315,  0.9997,  0.8032,  0.3137, -0.2903, -0.7883, -0.9988, -0.8448,
 -0.3827,  0.2191,  0.7410,  0.9925,  0.8819,  0.4496, -0.1467, -0.6895,
 -0.9807, -0.9142, -0.5141,  0.0736,  0.6344,  0.9638,  0.9416,  0.5758,
  0.0000, -0.5758, -0.9415, -0.9637, -0.6344, -0.0735,  0.5141,  0.9142,
  0.9808,  0.6895,  0.1467, -0.4496, -0.8819, -0.9924, -0.7409, -0.2191,
  0.3827,  0.8448,  0.9988,  0.7884,  0.2903, -0.3137, -0.8032, -0.9997,
 -0.8315, -0.3599,  0.2430,  0.7572,  0.9952,  0.8701,  0.4275, -0.1710,
 -0.7071, -0.9853, -0.9040, -0.4929,  0.0980,  0.6532,  0.9701,  0.9330,
  0.5556, -0.0245, -0.5957, -0.9495, -0.9569, -0.6152, -0.0491,  0.5350,
  0.9239,  0.9757,  0.6716,  0.1224, -0.4714, -0.8932, -0.9891, -0.7242,
 -0.1951,  0.4053,  0.8577,  0.9973,  0.7730,  0.2667, -0.3369, -0.8175,
 -1.0000, -0.8176, -0.3369,  0.2667,  0.7730,  0.9973,  0.8577,  0.4053,
 -0.1951, -0.7242, -0.9891, -0.8932, -0.4714,  0.1224,  0.6715,  0.9757,
  0.9239,  0.5350, -0.0491, -0.6152, -0.9569, -0.9495, -0.5957, -0.0245,
  0.5556,  0.9330,  0.9700,  0.6532,  0.0980, -0.4929, -0.9040, -0.9853,
 -0.7071, -0.1710,  0.4276,  0.8701,  0.9952,  0.7572,  0.2430, -0.3599,
 -0.8315, -0.9996, -0.8032, -0.3137,  0.2903,  0.7884,  0.9988,  0.8449,
  0.3827, -0.2191, -0.7409, -0.9924, -0.8819, -0.4496,  0.1467,  0.6895,
  0.9808,  0.9142,  0.5141, -0.0735, -0.6344, -0.9637, -0.9415, -0.5758,
  0.0000,  0.5758,  0.9416,  0.9638,  0.6344,  0.0736, -0.5141, -0.9142,
 -0.9807, -0.6895, -0.1467,  0.4496,  0.8819,  0.9925,  0.7410,  0.2191,
 -0.3827, -0.8448, -0.9988, -0.7883, -0.2903,  0.3137,  0.8032,  0.9997,
  0.8315,  0.3599, -0.2430, -0.7572, -0.9952, -0.8701, -0.4276,  0.1710,
  0.7071,  0.9853,  0.9040,  0.4929, -0.0980, -0.6531, -0.9700, -0.9330,
 -0.5555,  0.0245,  0.5957,  0.9496,  0.9569,  0.6152,  0.0490, -0.5350,
 -0.9239, -0.9757, -0.6715, -0.1224,  0.4714,  0.8932,  0.9892,  0.7243,
  0.1951, -0.4052, -0.8577, -0.9973, -0.7730, -0.2667,  0.3369,  0.8176,
  1.0000,  0.8176,  0.3369, -0.2667, -0.7730, -0.9973, -0.8577, -0.4052,
  0.1951,  0.7242,  0.9892,  0.8932,  0.4714, -0.1224, -0.6715, -0.9757,
 -0.9239, -0.5350,  0.0491,  0.6152,  0.9570,  0.9495,  0.5957,  0.0245,
 -0.5556, -0.9330, -0.9700, -0.6531, -0.0980,  0.4929,  0.9040,  0.9853,
  0.7071,  0.1710, -0.4276, -0.8701, -0.9951, -0.7572, -0.2430,  0.3599,
  0.8314,  0.9997,  0.8032,  0.3137, -0.2903, -0.7883, -0.9988, -0.8448,
 -0.3827,  0.2191,  0.7410,  0.9925,  0.8819,  0.4496, -0.1467, -0.6895,
 -0.9808, -0.9142, -0.5141,  0.0735,  0.6344,  0.9638,  0.9415,  0.5758,
  0.0000, -0.5758, -0.9415, -0.9637, -0.6344, -0.0735,  0.5141,  0.9142,
  0.9808,  0.6895,  0.1467, -0.4496, -0.8819, -0.9925, -0.7409, -0.2191,
  0.3827,  0.8448,  0.9988,  0.7884,  0.2903, -0.3137, -0.8032, -0.9997,
 -0.8315, -0.3599,  0.2430,  0.7572,  0.9951,  0.8701,  0.4275, -0.1709,
 -0.7071, -0.9852, -0.9040, -0.4929,  0.0980,  0.6532,  0.9700,  0.9330,
  0.5556, -0.0245, -0.5957, -0.9495, -0.9569, -0.6152, -0.0491,  0.5350,
  0.9239,  0.9757,  0.6716,  0.1224, -0.4714, -0.8932, -0.9892, -0.7242,
 -0.1951,  0.4053,  0.8577,  0.9973,  0.7730,  0.2667, -0.3369, -0.8176,
 -1.0000, -0.8176, -0.3369,  0.2667,  0.7730,  0.9973,  0.8577,  0.4053,
 -0.1951, -0.7242, -0.9891, -0.8932, -0.4714,  0.1224,  0.6716,  0.9757,
  0.9239,  0.5350, -0.0490, -0.6152, -0.9569, -0.9495, -0.5957, -0.0246,
  0.5556,  0.9330,  0.9700,  0.6532,  0.0980, -0.4929, -0.9040, -0.9853,
 -0.7071, -0.1710,  0.4276,  0.8701,  0.9952,  0.7572,  0.2430, -0.3599,
 -0.8315, -0.9997, -0.8032, -0.3137,  0.2903,  0.7884,  0.9988,  0.8448,
  0.3827, -0.2191, -0.7409, -0.9925, -0.8819, -0.4496,  0.1467,  0.6895,
  0.9808,  0.9142,  0.5141, -0.0736, -0.6344, -0.9637, -0.9415, -0.5758,
  0.0000,  0.5758,  0.9415,  0.9638,  0.6344,  0.0736, -0.5141, -0.9142,
 -0.9808, -0.6895, -0.1467,  0.4496,  0.8820,  0.9925,  0.7410,  0.2191,
 -0.3827, -0.8448, -0.9987, -0.7883, -0.2903,  0.3137,  0.8032,  0.9997,
  0.8315,  0.3599, -0.2430, -0.7572, -0.9951, -0.8701, -0.4276,  0.1710,
  0.7071,  0.9853,  0.9040,  0.4929, -0.0980, -0.6532, -0.9700, -0.9330,
 -0.5556,  0.0246,  0.5957,  0.9496,  0.9569,  0.6153,  0.0491, -0.5350,
 -0.9239, -0.9757, -0.6715, -0.1224,  0.4714,  0.8932,  0.9892,  0.7243,
  0.1951, -0.4052, -0.8577, -0.9973, -0.7730, -0.2667,  0.3369,  0.8176,
  1.0000,  0.8176,  0.3369, -0.2667, -0.7730, -0.9973, -0.8577, -0.4052,
  0.1951,  0.7242,  0.9892,  0.8932,  0.4714, -0.1224, -0.6715, -0.9757,
 -0.9239, -0.5350,  0.0491,  0.6152,  0.9569,  0.9496,  0.5957,  0.0245,
 -0.5555, -0.9330, -0.9700, -0.6531, -0.0980,  0.4929,  0.9040,  0.9853,
  0.7071,  0.1710, -0.4275, -0.8700, -0.9951, -0.7572, -0.2430,  0.3599,
  0.8315,  0.9997,  0.8032,  0.3137, -0.2903, -0.7883, -0.9988, -0.8448,
 -0.3827,  0.2191,  0.7410,  0.9925,  0.8819,  0.4496, -0.1467, -0.6895,
 -0.9808, -0.9142, -0.5141,  0.0736,  0.6344,  0.9638,  0.9416,  0.5758,
  0.0000, -0.5758, -0.9415, -0.9637, -0.6344, -0.0736,  0.5141,  0.9142,
  0.9808,  0.6895,  0.1467, -0.4496, -0.8819, -0.9924, -0.7409, -0.2191,
  0.3827,  0.8448,  0.9988,  0.7884,  0.2903, -0.3137, -0.8032, -0.9996,
 -0.8315, -0.3599,  0.2430,  0.7572,  0.9952,  0.8701,  0.4276, -0.1710,
 -0.7071, -0.9852, -0.9040, -0.4929,  0.0980,  0.6532,  0.9700,  0.9330,
  0.5556, -0.0245, -0.5957, -0.9495, -0.9569, -0.6152, -0.0491,  0.5350,
  0.9239,  0.9757,  0.6716,  0.1224, -0.4714, -0.8932, -0.9891, -0.7242,
 -0.1951,  0.4053,  0.8577,  0.9973,  0.7730,  0.2667, -0.3369, -0.8176,
 -1.0000, -0.8175, -0.3369,  0.2667,  0.7730,  0.9973,  0.8577,  0.4052,
 -0.1951, -0.7242, -0.9892, -0.8932, -0.4714,  0.1224,  0.6716,  0.9757,
  0.9239,  0.5350, -0.0491, -0.6152, -0.9569, -0.9495, -0.5957, -0.0245,
  0.5556,  0.9330,  0.9700,  0.6532,  0.0980, -0.4929, -0.9040, -0.9853,
 -0.7071, -0.1710,  0.4276,  0.8701,  0.9952,  0.7572,  0.2430, -0.3599,
 -0.8315, -0.9997, -0.8032, -0.3137,  0.2903,  0.7884,  0.9988,  0.8448,
  0.3827, -0.2191, -0.7409, -0.9924, -0.8819, -0.4496,  0.1468,  0.6896,
  0.9808,  0.9142,  0.5141, -0.0736, -0.6344, -0.9638, -0.9415, -0.5758
  };

// The Discrete Fourier Transform (DFT) results of the test signal above 
std::vector<Signal::FrequencyBin> testFrequencyDomainDFT = {
   {     0.0094,     0.0000 },  {     0.0006,     0.0007 },  {     0.0011,     0.0010 },  {    -0.0006,    -0.0009 },
   {     0.0004,    -0.0010 },  {    -0.0001,    -0.0007 },  {     0.0003,    -0.0005 },  {    -0.0003,     0.0000 },
   {     0.0007,    -0.0005 },  {    -0.0001,    -0.0005 },  {     0.0004,     0.0005 },  {    -0.0003,    -0.0005 },
   {     0.0001,    -0.0010 },  {     0.0002,     0.0003 },  {     0.0006,     0.0007 },  {    -0.0010,     0.0008 },
   {     0.0015,     0.0004 },  {    -0.0005,    -0.0012 },  {    -0.0005,     0.0006 },  {     0.0002,    -0.0004 },
   {    -0.0003,    -0.0013 },  {    -0.0004,     0.0010 },  {    -0.0004,     0.0010 },  {    -0.0003,     0.0002 },
   {     0.0007,    -0.0005 },  {     0.0002,     0.0003 },  {     0.0005,     0.0002 },  {     0.0002,     0.0006 },
   {    -0.0009,     0.0015 },  {    -0.0001,    -0.0003 },  {     0.0005,     0.0006 },  {     0.0002,     0.0014 },
   {    -0.0006,    -0.0001 },  {     0.0003,     0.0005 },  {    -0.0001,     0.0005 },  {    -0.0004,     0.0006 },
   {    -0.0001,    -0.0019 },  {    -0.0004,    -0.0002 },  {     0.0002,    -0.0005 },  {     0.0007,     0.0001 },
   {     0.0000,    -0.0008 },  {    -0.0001,    -0.0004 },  {    -0.0016,    -0.0009 },  {    -0.0003,     0.0000 },
   {     0.0000,     0.0002 },  {     0.0001,     0.0004 },  {     0.0009,    -0.0008 },  {     0.0002,    -0.0007 },
   {    -0.0005,    -0.0001 },  {    -0.0008,    -0.0008 },  {    -0.0010,    -0.0003 },  {    -0.0013,    -0.0003 },
   {    -0.0008,     0.0015 },  {    -0.0002,     0.0005 },  {     0.0010,     0.0000 },  {    -0.0011,     0.0003 },
   {     0.0022,    -0.0006 },  {    -0.0006,    -0.0004 },  {    -0.0007,    -0.0006 },  {    -0.0000,     0.0000 },
   {    -0.0005,    -0.0001 },  {    -0.0009,    -0.0006 },  {    -0.0001,     0.0003 },  {     0.0008,    -0.0002 },
   {     0.0002,    -0.0010 },  {     0.0007,     0.0008 },  {    -0.0005,    -0.0011 },  {     0.0007,    -0.0001 },
   {     0.0001,    -0.0008 },  {     0.0001,    -0.0003 },  {     0.0004,    -0.0006 },  {     0.0006,    -0.0013 },
   {     0.0014,    -0.0004 },  {    -0.0002,     0.0001 },  {    -0.0003,     0.0007 },  {    -0.0004,    -0.0014 },
   {     0.0001,     0.0013 },  {    -0.0004,    -0.0009 },  {     0.0006,    -0.0009 },  {    -0.0001,     0.0003 },
   {     0.0008,     0.0001 },  {     0.0006,    -0.0011 },  {     0.0001,     0.0002 },  {    -0.0001,     0.0000 },
   {     0.0003,     0.0015 },  {     0.0016,    -0.0012 },  {    -0.0002,    -0.0006 },  {     0.0005,     0.0000 },
   {    -0.0007,    -0.0002 },  {    -0.0009,    -0.0003 },  {    -0.0009,    -0.0008 },  {    -0.0002,    -0.0002 },
   {     0.0003,    -0.0001 },  {    -0.0008,    -0.0007 },  {    -0.0007,    -0.0001 },  {    -0.0002,    -0.0007 },
   {     0.0001,    -0.0003 },  {     0.0010,    -0.0003 },  {     0.0005,     0.0001 },  {     0.0000,     0.0005 },
   {     0.0001,  -511.9954 },  {     0.0007,     0.0000 },  {     0.0010,     0.0003 },  {     0.0006,    -0.0001 },
   {    -0.0002,    -0.0009 },  {     0.0016,     0.0006 },  {     0.0003,    -0.0004 },  {     0.0005,    -0.0006 },
   {     0.0003,     0.0006 },  {     0.0003,    -0.0004 },  {    -0.0002,    -0.0005 },  {     0.0005,     0.0002 },
   {     0.0008,    -0.0002 },  {    -0.0007,    -0.0008 },  {    -0.0006,    -0.0003 },  {     0.0002,    -0.0007 },
   {     0.0003,     0.0011 },  {     0.0004,     0.0004 },  {    -0.0005,     0.0008 },  {     0.0009,    -0.0003 },
   {    -0.0020,     0.0010 },  {    -0.0009,     0.0001 },  {     0.0004,    -0.0001 },  {    -0.0001,     0.0012 },
   {     0.0007,    -0.0007 },  {     0.0004,    -0.0007 },  {    -0.0000,    -0.0003 },  {    -0.0010,     0.0009 },
   {    -0.0010,    -0.0003 },  {     0.0003,    -0.0001 },  {    -0.0002,     0.0006 },  {     0.0008,     0.0006 },
   {     0.0008,    -0.0013 },  {    -0.0013,    -0.0004 },  {    -0.0002,    -0.0000 },  {    -0.0006,     0.0010 },
   {    -0.0014,     0.0003 },  {     0.0006,     0.0003 },  {    -0.0001,     0.0001 },  {     0.0008,     0.0010 },
   {     0.0005,    -0.0005 },  {    -0.0002,    -0.0008 },  {     0.0006,    -0.0009 },  {     0.0007,    -0.0005 },
   {     0.0010,     0.0010 },  {    -0.0003,     0.0003 },  {     0.0008,    -0.0003 },  {     0.0003,    -0.0003 },
   {    -0.0003,    -0.0019 },  {     0.0001,     0.0005 },  {    -0.0002,    -0.0009 },  {     0.0001,     0.0006 },
   {    -0.0005,     0.0004 },  {    -0.0007,    -0.0002 },  {    -0.0003,     0.0003 },  {     0.0012,     0.0001 },
   {    -0.0007,     0.0005 },  {    -0.0005,     0.0008 },  {    -0.0003,     0.0001 },  {    -0.0006,    -0.0009 },
   {     0.0001,     0.0009 },  {    -0.0003,     0.0001 },  {    -0.0001,    -0.0008 },  {     0.0007,     0.0004 },
   {    -0.0001,     0.0001 },  {    -0.0010,     0.0006 },  {    -0.0006,     0.0004 },  {     0.0005,     0.0011 },
   {     0.0003,    -0.0004 },  {    -0.0001,     0.0011 },  {     0.0008,    -0.0002 },  {    -0.0002,     0.0005 },
   {     0.0011,     0.0011 },  {    -0.0008,     0.0004 },  {     0.0002,    -0.0010 },  {     0.0005,    -0.0003 },
   {    -0.0029,    -0.0005 },  {     0.0001,     0.0007 },  {     0.0004,     0.0008 },  {     0.0007,    -0.0013 },
   {    -0.0005,     0.0006 },  {    -0.0001,     0.0002 },  {     0.0001,     0.0001 },  {    -0.0005,    -0.0011 },
   {    -0.0014,     0.0003 },  {    -0.0001,     0.0001 },  {    -0.0004,     0.0003 },  {     0.0001,    -0.0001 },
   {    -0.0001,    -0.0002 },  {    -0.0001,    -0.0001 },  {    -0.0005,     0.0006 },  {    -0.0010,    -0.0002 },
   {    -0.0025,     0.0001 },  {     0.0002,    -0.0005 },  {     0.0009,    -0.0008 },  {     0.0003,     0.0002 },
   {    -0.0002,     0.0008 },  {     0.0008,    -0.0005 },  {    -0.0005,     0.0007 },  {     0.0000,    -0.0005 },
   {    -0.0039,     0.0001 },  {     0.0001,     0.0009 },  {     0.0005,    -0.0003 },  {     0.0009,    -0.0007 },
   {     0.0004,    -0.0013 },  {    -0.0001,    -0.0003 },  {     0.0001,     0.0001 },  {     0.0002,     0.0005 },
   {    -0.0001,     0.0004 },  {     0.0011,     0.0002 },  {     0.0003,    -0.0003 },  {     0.0002,    -0.0004 },
   {    -0.0004,     0.0029 },  {     0.0004,     0.0001 },  {     0.0011,    -0.0012 },  {     0.0004,    -0.0001 },
   {     0.0003,     0.0002 },  {    -0.0007,     0.0006 },  {    -0.0003,    -0.0001 },  {     0.0002,    -0.0003 },
   {    -0.0003,     0.0002 },  {     0.0001,     0.0001 },  {     0.0007,    -0.0002 },  {     0.0004,     0.0001 },
   {     0.0022,     0.0002 },  {     0.0005,     0.0001 },  {     0.0001,    -0.0004 },  {     0.0001,    -0.0006 },
   {     0.0001,    -0.0013 },  {     0.0004,     0.0004 },  {     0.0004,     0.0005 },  {    -0.0004,    -0.0001 },
   {    -0.0003,    -0.0005 },  {    -0.0005,    -0.0001 },  {     0.0005,    -0.0002 },  {    -0.0009,    -0.0001 },
   {    -0.0002,     0.0004 },  {    -0.0006,     0.0001 },  {     0.0003,     0.0008 },  {    -0.0004,     0.0005 },
   {    -0.0019,     0.0007 },  {     0.0004,     0.0003 },  {    -0.0000,     0.0005 },  {     0.0002,    -0.0004 },
   {     0.0002,    -0.0006 },  {     0.0005,     0.0007 },  {     0.0002,     0.0000 },  {     0.0004,     0.0004 },
   {    -0.0001,    -0.0000 },  {    -0.0004,     0.0008 },  {     0.0001,     0.0009 },  {     0.0002,     0.0001 },
   {     0.0003,    -0.0026 },  {     0.0004,    -0.0013 },  {    -0.0002,    -0.0002 },  {    -0.0007,    -0.0003 },
   {    -0.0016,    -0.0004 },  {    -0.0009,    -0.0007 },  {    -0.0005,     0.0006 },  {    -0.0003,    -0.0003 },
   {     0.0001,    -0.0002 },  {    -0.0001,     0.0006 },  {    -0.0002,     0.0005 },  {    -0.0008,     0.0006 },
   {    -0.0004,     0.0004 },  {     0.0001,     0.0006 },  {    -0.0018,    -0.0003 },  {    -0.0011,     0.0005 },
   {     0.0000,    -0.0013 },  {     0.0006,     0.0003 },  {    -0.0004,     0.0000 },  {    -0.0001,    -0.0006 },
   {    -0.0011,    -0.0001 },  {     0.0001,     0.0002 },  {     0.0001,    -0.0005 },  {     0.0003,    -0.0003 },
   {    -0.0004,     0.0005 },  {    -0.0001,    -0.0002 },  {     0.0005,     0.0014 },  {     0.0005,    -0.0001 },
   {     0.0009,    -0.0014 },  {    -0.0000,    -0.0002 },  {    -0.0006,     0.0000 },  {    -0.0005,     0.0001 },
   {    -0.0012,     0.0038 },  {    -0.0014,     0.0007 },  {    -0.0008,     0.0005 },  {     0.0000,    -0.0001 },
   {     0.0007,    -0.0000 },  {     0.0002,     0.0002 },  {    -0.0015,    -0.0011 },  {     0.0008,    -0.0001 },
   {     0.0005,     0.0009 },  {     0.0009,     0.0003 },  {    -0.0003,    -0.0001 },  {     0.0004,     0.0009 },
   {    -0.0017,    -0.0004 },  {    -0.0003,    -0.0007 },  {    -0.0011,    -0.0002 },  {    -0.0004,     0.0007 },
   {     0.0007,    -0.0010 },  {     0.0004,    -0.0005 },  {     0.0005,     0.0003 },  {    -0.0007,    -0.0007 },
   {     0.0013,    -0.0005 },  {     0.0005,     0.0002 },  {     0.0005,    -0.0001 },  {    -0.0014,     0.0008 },
   {    -0.0007,    -0.0013 },  {     0.0002,    -0.0004 },  {     0.0005,    -0.0005 },  {     0.0012,    -0.0002 },
   {    -0.0001,     0.0003 },  {     0.0004,     0.0004 },  {    -0.0001,    -0.0005 },  {     0.0003,     0.0004 },
   {     0.0003,    -0.0008 },  {    -0.0004,     0.0001 },  {     0.0004,    -0.0004 },  {    -0.0003,    -0.0007 },
   {    -0.0006,     0.0003 },  {    -0.0005,    -0.0001 },  {    -0.0001,     0.0008 },  {     0.0015,     0.0001 },
   {    -0.0007,     0.0010 },  {     0.0006,     0.0003 },  {    -0.0005,     0.0010 },  {     0.0007,    -0.0013 },
   {     0.0008,    -0.0001 },  {     0.0000,     0.0001 },  {     0.0009,    -0.0002 },  {    -0.0003,     0.0002 },
   {     0.0004,     0.0013 },  {     0.0006,    -0.0002 },  {    -0.0019,     0.0005 },  {     0.0007,     0.0004 },
   {     0.0001,     0.0008 },  {     0.0002,     0.0005 },  {    -0.0006,    -0.0001 },  {    -0.0003,    -0.0001 },
   {     0.0002,    -0.0026 },  {    -0.0005,     0.0007 },  {    -0.0009,     0.0002 },  {     0.0003,    -0.0001 },
   {    -0.0018,     0.0005 },  {     0.0001,     0.0006 },  {     0.0001,     0.0002 },  {     0.0001,     0.0005 },
   {     0.0002,     0.0003 },  {     0.0009,     0.0003 },  {    -0.0005,     0.0005 },  {    -0.0004,    -0.0003 },
   {    -0.0007,    -0.0003 },  {     0.0004,    -0.0004 },  {    -0.0000,     0.0001 },  {    -0.0008,     0.0002 },
   {    -0.0001,    -0.0002 },  {    -0.0006,     0.0004 },  {    -0.0008,     0.0005 },  {    -0.0008,     0.0006 },
   {     0.0030,     0.0001 },  {    -0.0006,     0.0001 },  {     0.0000,     0.0000 },  {    -0.0008,     0.0000 },
   {    -0.0002,    -0.0006 },  {     0.0000,    -0.0009 },  {    -0.0004,     0.0001 },  {    -0.0005,    -0.0006 },
   {     0.0002,     0.0009 },  {    -0.0002,     0.0001 },  {     0.0004,    -0.0007 },  {    -0.0002,     0.0005 },
   {    -0.0002,     0.0004 },  {     0.0014,     0.0007 },  {    -0.0001,    -0.0004 },  {    -0.0009,    -0.0004 },
   {     0.0015,    -0.0001 },  {    -0.0006,    -0.0005 },  {     0.0007,     0.0017 },  {    -0.0000,     0.0001 },
   {     0.0001,    -0.0012 },  {    -0.0007,    -0.0000 },  {    -0.0001,    -0.0006 },  {     0.0002,    -0.0008 },
   {     0.0006,     0.0001 },  {    -0.0007,    -0.0013 },  {     0.0001,     0.0000 },  {    -0.0001,    -0.0001 },
   {    -0.0000,     0.0002 },  {    -0.0003,     0.0000 },  {     0.0005,    -0.0005 },  {    -0.0004,     0.0014 },
   {     0.0012,     0.0003 },  {    -0.0009,     0.0008 },  {    -0.0004,    -0.0002 },  {     0.0004,     0.0012 },
   {     0.0002,     0.0016 },  {     0.0002,    -0.0002 },  {    -0.0003,    -0.0009 },  {    -0.0003,    -0.0005 },
   {    -0.0009,    -0.0004 },  {    -0.0003,    -0.0003 },  {     0.0008,     0.0003 },  {     0.0003,    -0.0012 },
   {    -0.0005,    -0.0000 },  {    -0.0004,     0.0002 },  {    -0.0002,    -0.0002 },  {    -0.0004,    -0.0005 },
   {     0.0006,    -0.0002 },  {     0.0005,     0.0002 },  {     0.0010,     0.0008 },  {    -0.0012,    -0.0002 },
   {    -0.0003,     0.0011 },  {    -0.0006,     0.0008 },  {    -0.0001,     0.0002 },  {    -0.0009,     0.0006 },
   {     0.0000,     0.0001 },  {     0.0002,    -0.0005 },  {     0.0009,    -0.0003 },  {     0.0009,     0.0005 },
   {     0.0007,     0.0019 },  {     0.0003,    -0.0002 },  {    -0.0001,     0.0001 },  {     0.0009,    -0.0008 },
   {    -0.0010,     0.0003 },  {    -0.0012,    -0.0009 },  {    -0.0003,     0.0001 },  {     0.0001,    -0.0003 },
   {     0.0002,     0.0002 },  {     0.0001,     0.0002 },  {     0.0001,     0.0002 },  {    -0.0009,    -0.0001 },
   {     0.0025,    -0.0009 },  {     0.0005,     0.0012 },  {    -0.0004,     0.0002 },  {    -0.0006,    -0.0006 },
   {    -0.0003,    -0.0005 },  {     0.0005,    -0.0006 },  {     0.0009,    -0.0007 },  {    -0.0000,     0.0005 },
   {     0.0006,    -0.0010 },  {     0.0004,    -0.0002 },  {    -0.0004,    -0.0005 },  {    -0.0003,     0.0001 },
   {    -0.0001,    -0.0015 },  {     0.0003,     0.0005 },  {     0.0008,     0.0002 },  {     0.0009,    -0.0018 },
   {     0.0001,     0.0005 },  {     0.0001,     0.0001 },  {     0.0002,     0.0003 },  {     0.0003,    -0.0008 },
   {    -0.0000,     0.0016 },  {    -0.0003,     0.0003 },  {    -0.0001,     0.0002 },  {     0.0003,    -0.0001 },
   {    -0.0009,    -0.0004 },  {     0.0005,    -0.0009 },  {     0.0001,     0.0002 },  {    -0.0009,    -0.0000 },
   {    -0.0002,     0.0003 },  {     0.0009,    -0.0011 },  {    -0.0004,     0.0004 },  {    -0.0008,     0.0011 },
   {    -0.0011,    -0.0002 },  {     0.0005,     0.0001 },  {    -0.0004,    -0.0004 },  {     0.0007,     0.0000 },
   {    -0.0002,     0.0003 },  {    -0.0001,    -0.0009 },  {     0.0004,    -0.0006 },  {     0.0003,     0.0004 },
   {     0.0003,    -0.0002 },  {     0.0013,     0.0006 },  {     0.0008,    -0.0003 },  {    -0.0009,    -0.0007 },
   {     0.0006,     0.0016 },  {     0.0006,    -0.0002 },  {     0.0006,    -0.0010 },  {     0.0000,     0.0003 },
   {    -0.0011,    -0.0003 },  {     0.0003,    -0.0007 },  {     0.0006,     0.0009 },  {    -0.0009,    -0.0007 },
   {    -0.0002,     0.0001 },  {     0.0003,     0.0002 },  {     0.0009,     0.0004 },  {     0.0000,     0.0000 },
   {     0.0011,     0.0001 },  {    -0.0004,    -0.0009 },  {     0.0001,     0.0000 },  {    -0.0001,     0.0005 },
   {    -0.0009,    -0.0006 },  {    -0.0003,    -0.0007 },  {    -0.0002,     0.0006 },  {     0.0010,    -0.0006 },
   {     0.0004,     0.0009 },  {    -0.0004,    -0.0003 },  {     0.0003,    -0.0009 },  {    -0.0002,     0.0005 },
   {     0.0009,    -0.0023 },  {    -0.0001,    -0.0009 },  {    -0.0003,     0.0004 },  {    -0.0000,     0.0006 },
   {     0.0007,    -0.0014 },  {     0.0008,    -0.0002 },  {    -0.0002,     0.0009 },  {     0.0008,    -0.0011 },
   {     0.0003,     0.0003 },  {    -0.0002,    -0.0000 },  {    -0.0011,     0.0001 },  {     0.0004,     0.0006 },
   {    -0.0014,    -0.0000 }};

TEST(FourierTransformTests, PowerOfTwoTests)
{
	EXPECT_FALSE(Signal::Fourier::IsPowerOfTwo(0));
	EXPECT_TRUE(Signal::Fourier::IsPowerOfTwo(1));
	EXPECT_TRUE(Signal::Fourier::IsPowerOfTwo(2));
	EXPECT_TRUE(Signal::Fourier::IsPowerOfTwo(4));
	EXPECT_TRUE(Signal::Fourier::IsPowerOfTwo(8));
	EXPECT_FALSE(Signal::Fourier::IsPowerOfTwo(9));
	EXPECT_TRUE(Signal::Fourier::IsPowerOfTwo(16384));
}

TEST(FourierTransformTests, TestDFT)
{
	auto frequencyDomain = Signal::Fourier::ApplyDFT(AudioData(testTimeDomain));

	EXPECT_EQ(testTimeDomain.size() / 2 + 1, frequencyDomain.GetSize());

	std::size_t index{0};
	while(index < frequencyDomain.GetSize())
	{
		EXPECT_NEAR(testFrequencyDomainDFT[index].reX_, frequencyDomain.GetBin(index).reX_, 0.0001);
		EXPECT_NEAR(testFrequencyDomainDFT[index].imX_, frequencyDomain.GetBin(index).imX_, 0.0001);
		++index;
	}
}

TEST(FourierTransformTests, TestInverseDFT)
{
	auto timeDomain = Signal::Fourier::ApplyInverseDFT(testFrequencyDomainDFT);

	EXPECT_EQ(testFrequencyDomainDFT.size() * 2 - 2, timeDomain.GetSize());

	std::size_t index{0};
	while(index < timeDomain.GetSize())
	{
		EXPECT_NEAR(testTimeDomain[index], timeDomain.GetData()[index], 0.0001);
		++index;
	}
}

TEST(FourierTransformTests, TestDFTRoundTrip)
{
	auto outputFrequencyDomain = Signal::Fourier::ApplyDFT(AudioData(testTimeDomain));
	auto outputTimeDomain = Signal::Fourier::ApplyInverseDFT(outputFrequencyDomain);

	EXPECT_EQ(testTimeDomain.size(), outputTimeDomain.GetSize());

	for(auto i{0}; i < testTimeDomain.size(); ++i)
	{
		EXPECT_NEAR(testTimeDomain[i], outputTimeDomain.GetData()[i], 0.0001);
	}
}

TEST(FourierTransformTests, TestFFT)
{
	auto frequencyDomain = Signal::Fourier::ApplyFFT(AudioData(testTimeDomain));

	EXPECT_EQ(testTimeDomain.size() / 2 + 1, frequencyDomain.GetSize());

	std::size_t index{0};
	while(index < frequencyDomain.GetSize())
	{
		EXPECT_NEAR(testFrequencyDomainDFT[index].reX_, frequencyDomain.GetBin(index).reX_, 0.0001);
		EXPECT_NEAR(testFrequencyDomainDFT[index].imX_, frequencyDomain.GetBin(index).imX_, 0.0001);
		++index;
	}
}

TEST(FourierTransformTests, TestInverseFFT)
{
	auto timeDomain = Signal::Fourier::ApplyInverseFFT(testFrequencyDomainDFT);

	EXPECT_EQ(testFrequencyDomainDFT.size() * 2 - 2, timeDomain.GetSize());

	std::size_t index{0};
	while(index < timeDomain.GetSize())
	{
		EXPECT_NEAR(testTimeDomain[index], timeDomain.GetData()[index], 0.0001);
		++index;
	}
}

TEST(FourierTransformTests, TestFFTRoundTrip)
{
	auto outputFrequencyDomain = Signal::Fourier::ApplyFFT(AudioData(testTimeDomain));
	auto outputTimeDomain = Signal::Fourier::ApplyInverseFFT(outputFrequencyDomain);

	EXPECT_EQ(testTimeDomain.size(), outputTimeDomain.GetSize());

	for(auto i{0}; i < testTimeDomain.size(); ++i)
	{
		EXPECT_NEAR(testTimeDomain[i], outputTimeDomain.GetData()[i], 0.0001);
	}
}
